"vim-plug
call plug#begin(has('win32') ? '~/vimfiles/download' : '~/.vim/download')
Plug 'dense-analysis/ale'
Plug 'fatih/vim-go'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'cjgajard/patagonia-vim'
call plug#end()

"preload
if has('win32') | set enc=utf-8 | endif

"options
set backspace=indent,start
set backupcopy=yes nobackup noundofile
set expandtab shiftwidth=2 softtabstop=2 tabstop=8
set cursorline cursorlineopt=number
set fillchars=stl:=,stlnc:-,vert:\|,fold:-
set hlsearch noincsearch
set list listchars=tab:·\ ,trail:~
set nonumber norelativenumber numberwidth=2
set showcmd
set splitbelow splitright
set laststatus=2 statusline=[%<%f:%l:%c%V]%m%r%q%w%=%a%y[%n]
set textwidth=80 colorcolumn=+1
set wildmenu wildmode=full
set wildignorecase wildignore=.git/,.*.sw[a-p],.keep

let c_syntax_for_h = 1

"remap-builtins
nnoremap Q <nop>
nnoremap q: <nop>
nnoremap Ñ :
"nnoremap ; :
"nnoremap : ;
nnoremap <Leader>q :let @/=''\|noh<CR>
nnoremap <Leader>m :silent make\|redraw!\|cc<CR>
nnoremap <Leader>p :set paste! paste?<CR>

"related-buffer
nnoremap <Leader>et :e %:r_test.%:e<CR>
nnoremap <Leader>eT :exec 'e '.substitute(expand('%:r'),'_test','','').'.'.expand('%:e')<CR>

"clipboard
let g:copyprg = 'DISPLAY=:0 xclip -i -sel c'
let g:pasteprg = 'DISPLAY=:0 xclip -o -sel c'
let g:pastepprg = 'DISPLAY=:0 xclip -o -sel primary'
nnoremap <Leader>xc :call system(g:copyprg, @")<CR>
nnoremap <Leader>xv "=substitute(system(g:pasteprg), '[\r\n]*$', '', '')<CR>p
inoremap <C-x>v <C-R>=system(g:pasteprg)<CR>
nnoremap <Leader>xx "=system(g:pastepprg)<CR>p
inoremap <C-x>x <C-R>=system(g:pastepprg)<CR>

"daynight
function! IsNight()
  let l:latitude='33.27S'
  let l:longitude='70.4W'
  call system('command -v sunwait')
  if v:shell_error == 0
    call system('sunwait poll civil '.l:latitude.' '.l:longitude)
    return v:shell_error == 3
  endif
  let l:hour = str2nr(system('date +%H'))
  return l:hour < 7 || l:hour > 19
endfunction

"autocommands
augroup vimrc_reload
  au!
  au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC
    \ | if has('gui_running') && !empty($MYGVIMRC) | so $MYGVIMRC | endif
augroup END

augroup fo_clean
  au!
  au FileType * set fo-=o
augroup END

"terminal
nnoremap <Leader>tj :terminal<CR>
nnoremap <Leader>tl :vertical terminal<CR>
nnoremap <Leader>th :vertical terminal<CR><C-w>H

"netrw
let g:netrw_list_hide = '^\.\.\?[\/]$,'.netrw_gitignore#Hide()
let g:netrw_hide = 1
"let g:netrw_sort_sequence = '[\/]$,\.\(h\|c\)$,*'
let g:netrw_sort_sequence = '[\/]$,*'
nnoremap <Leader>ee :Explore .<CR>
nnoremap <Leader>er :Rexplore<CR>
nnoremap <Leader>ev :Vexplore .<CR>

"dense-analysis/ale
let g:ale_echo_msg_format = '(%linter%/%code%) %s'
let g:ale_fix_on_save = 1
let g:ale_lint_on_enter = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_text_changed = 'never'
let g:ale_set_ballons = 0
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
nmap <Leader>ad <Plug>(ale_detail)
nmap <Leader>af <Plug>(ale_fix)
nmap <Leader>aj <Plug>(ale_next)
nmap <Leader>ak <Plug>(ale_previous)
nmap <Leader>al <Plug>(ale_lint)
nmap <Leader>an <Plug>(ale_next_wrap)
nmap <Leader>ap <Plug>(ale_previous_wrap)
nmap <Leader>ag <Plug>(ale_go_to_definition)
nmap <Leader>aG <Plug>(ale_go_to_type_definition)
nmap <Leader>aG <Plug>(ale_lint_on_insert_leave)
nnoremap <Leader>ae :ALEEnableBuffer<CR>
nnoremap <Leader>aE :ALEDisableBuffer<CR>
nnoremap <Leader>ai :ALEInfo<CR>
nnoremap <Leader>ah :ALEHover<CR>

"fatih/vim-go
let g:go_addtags_transform = 'camelcase'
let g:go_echo_go_info = 0
let g:go_fmt_fail_silently = 1
let g:go_imports_autosave = 0
let g:go_template_autocreate = 0
set completeopt=menu
nnoremap <Leader>gi :GoImports<CR>
nnoremap <Leader>gt :GoAddTags<CR>

"environment
filetype off
colorscheme trescolores
filetype plugin indent on
